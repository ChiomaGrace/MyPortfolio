{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input } from '@angular/core';\nimport { formatDate } from '@angular/common';\nexport let ContactComponent = class ContactComponent {\n  constructor(router, _httpService) {\n    this.router = router;\n    this._httpService = _httpService;\n    this.submittedEmail = {\n      firstName: \"\",\n      lastName: \"\",\n      emailAddress: \"\",\n      subject: \"\",\n      email: \"\"\n    };\n    this.sendingEmailObservable = {};\n    this.hasEmailFormErrors = false; //Default state of the form errors\n    this.today = new Date();\n    this.currentTime = \"\";\n    // console.log(\"This is the about me console log showing which route is currently being visited:\", this.router.url);\n  }\n\n  ngOnInit() {\n    // console.log(\"The boolean value for the showNavItem:\", this.clickedHomeNavItem);\n    // console.log(\"The function emitting from the parent:\", this.clickedHomeNavItem);\n    this.currentTime = formatDate(this.today, 'hh:mm a', 'en-US', 'GMT-07');\n  }\n  submittedEmailForm() {\n    // console.log(\"This console log is from the submittedEmailForm function in the contact component.\");\n    // console.log(\"This is the value of the date submitted via the form before the service:\", this.submittedEmail)\n    // this.sendingEmailObservable = this._httpService.emailService(this.submittedEmail);//this works but doesn't get validation errors from mongoose\n    this.sendingEmailObservable = this._httpService.emailService(this.submittedEmail).subscribe(emailData => {\n      // console.log(\"This is the from data submitted via the form after being subscribed to:\", emailData)\n      //@ts-ignore .ts is not happy with 'emailData.errors', so I used an ignore here\n      if (emailData.errors) {\n        //The name 'errors' is the label of the mongoose object containing all the model validation errors\n        // console.log(\"This console log means there are errors when the email form atempted to submit, so it was unsucessful.\")\n        this.hasEmailFormErrors = true;\n        this.emailFormErrors = emailData;\n        // console.log(\"Here are the form errors:\", this.emailFormErrors.errors);\n        // console.log(\"Here is a specific error:\", this.emailFormErrors.errors.firstName.message) \n      } else {\n        // console.log(\"This console log means the email form submitted succesfully.\");\n        this.hasEmailFormErrors = false;\n      }\n    });\n  }\n};\n__decorate([Input()], ContactComponent.prototype, \"clickedHomeNavItem\", void 0);\nContactComponent = __decorate([Component({\n  selector: 'app-contact',\n  templateUrl: './contact.component.html',\n  styleUrls: ['./contact.component.css']\n})], ContactComponent);","map":{"version":3,"names":["Component","Input","formatDate","ContactComponent","constructor","router","_httpService","submittedEmail","firstName","lastName","emailAddress","subject","email","sendingEmailObservable","hasEmailFormErrors","today","Date","currentTime","ngOnInit","submittedEmailForm","emailService","subscribe","emailData","errors","emailFormErrors","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\chioma.ubogagu.SV-NB-DEV-78\\Angular\\myPortfolio\\src\\app\\contact\\contact.component.ts"],"sourcesContent":["import { Component, OnInit, Input } from '@angular/core';\nimport {Router} from '@angular/router';\n// import { HttpClient } from '@angular/common/http';\nimport {SharedService} from 'src/app/shared.service' //added this\nimport {formatDate } from '@angular/common';\n\n\n@Component({\n  selector: 'app-contact',\n  templateUrl: './contact.component.html',\n  styleUrls: ['./contact.component.css']\n})\n\nexport class ContactComponent implements OnInit {\n  @Input() clickedHomeNavItem : any; //This is how the parent notifies the child of the data it is passing\n\n  submittedEmail = {\n    firstName: \"\",\n    lastName: \"\",\n    emailAddress: \"\",\n    subject: \"\",\n    email: \"\"\n  }\n\n  sendingEmailObservable = {};\n  \n  hasEmailFormErrors = false; //Default state of the form errors\n\n  emailFormErrors : any; //Where the errors willl be stored\n\n  today= new Date();\n\n  currentTime = \"\";\n \n\n  constructor(  private router: Router, private _httpService: SharedService,  ) {\n    // console.log(\"This is the about me console log showing which route is currently being visited:\", this.router.url);\n  }\n  \n  ngOnInit() {\n    // console.log(\"The boolean value for the showNavItem:\", this.clickedHomeNavItem);\n    // console.log(\"The function emitting from the parent:\", this.clickedHomeNavItem);\n    this.currentTime = formatDate(this.today, 'hh:mm a', 'en-US', 'GMT-07');\n  }\n\n  submittedEmailForm(){\n    // console.log(\"This console log is from the submittedEmailForm function in the contact component.\");\n    // console.log(\"This is the value of the date submitted via the form before the service:\", this.submittedEmail)\n    // this.sendingEmailObservable = this._httpService.emailService(this.submittedEmail);//this works but doesn't get validation errors from mongoose\n    this.sendingEmailObservable = this._httpService.emailService(this.submittedEmail).subscribe(emailData => {\n      // console.log(\"This is the from data submitted via the form after being subscribed to:\", emailData)\n      //@ts-ignore .ts is not happy with 'emailData.errors', so I used an ignore here\n      if(emailData.errors) { //The name 'errors' is the label of the mongoose object containing all the model validation errors\n        // console.log(\"This console log means there are errors when the email form atempted to submit, so it was unsucessful.\")\n        this.hasEmailFormErrors = true;\n        this.emailFormErrors = emailData;\n        // console.log(\"Here are the form errors:\", this.emailFormErrors.errors);\n        // console.log(\"Here is a specific error:\", this.emailFormErrors.errors.firstName.message) \n      }\n      else {\n        // console.log(\"This console log means the email form submitted succesfully.\");\n        this.hasEmailFormErrors=false;\n      }\n    })\n  }\n  \n}\n"],"mappings":";AAAA,SAASA,SAAS,EAAUC,KAAK,QAAQ,eAAe;AAIxD,SAAQC,UAAU,QAAQ,iBAAiB;AASpC,WAAMC,gBAAgB,GAAtB,MAAMA,gBAAgB;EAsB3BC,YAAsBC,MAAc,EAAUC,YAA2B;IAAnD,KAAAD,MAAM,GAANA,MAAM;IAAkB,KAAAC,YAAY,GAAZA,YAAY;IAnB1D,KAAAC,cAAc,GAAG;MACfC,SAAS,EAAE,EAAE;MACbC,QAAQ,EAAE,EAAE;MACZC,YAAY,EAAE,EAAE;MAChBC,OAAO,EAAE,EAAE;MACXC,KAAK,EAAE;KACR;IAED,KAAAC,sBAAsB,GAAG,EAAE;IAE3B,KAAAC,kBAAkB,GAAG,KAAK,CAAC,CAAC;IAI5B,KAAAC,KAAK,GAAE,IAAIC,IAAI,EAAE;IAEjB,KAAAC,WAAW,GAAG,EAAE;IAId;EACF;;EAEAC,QAAQA,CAAA;IACN;IACA;IACA,IAAI,CAACD,WAAW,GAAGf,UAAU,CAAC,IAAI,CAACa,KAAK,EAAE,SAAS,EAAE,OAAO,EAAE,QAAQ,CAAC;EACzE;EAEAI,kBAAkBA,CAAA;IAChB;IACA;IACA;IACA,IAAI,CAACN,sBAAsB,GAAG,IAAI,CAACP,YAAY,CAACc,YAAY,CAAC,IAAI,CAACb,cAAc,CAAC,CAACc,SAAS,CAACC,SAAS,IAAG;MACtG;MACA;MACA,IAAGA,SAAS,CAACC,MAAM,EAAE;QAAE;QACrB;QACA,IAAI,CAACT,kBAAkB,GAAG,IAAI;QAC9B,IAAI,CAACU,eAAe,GAAGF,SAAS;QAChC;QACA;OACD,MACI;QACH;QACA,IAAI,CAACR,kBAAkB,GAAC,KAAK;;IAEjC,CAAC,CAAC;EACJ;CAED;AApDUW,UAAA,EAARxB,KAAK,EAAE,C,2DAA0B;AADvBE,gBAAgB,GAAAsB,UAAA,EAN5BzB,SAAS,CAAC;EACT0B,QAAQ,EAAE,aAAa;EACvBC,WAAW,EAAE,0BAA0B;EACvCC,SAAS,EAAE,CAAC,yBAAyB;CACtC,CAAC,C,EAEWzB,gBAAgB,CAqD5B"},"metadata":{},"sourceType":"module","externalDependencies":[]}